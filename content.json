{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Searching a Value in BST Iteratively","slug":"bst-find-iterative","date":"2019-04-25T13:15:46.000Z","updated":"2019-04-25T13:26:43.297Z","comments":true,"path":"2019/04/25/bst-find-iterative/","link":"","permalink":"http://yoursite.com/2019/04/25/bst-find-iterative/","excerpt":"","text":"12345678910111213141516171819class TreeNode &#123; public TreeNode(int val) &#123; this.val = val; &#125; int val; TreeNode left; TreeNode right;&#125;public boolean searchBST(TreeNode root, int target) &#123; TreeNode node = root; while (node != null) &#123; if (node.val == target) &#123; return true; &#125; else if (target &lt; node.val) &#123; node = node.left; &#125; else &#123; node = node.right; &#125; &#125; return false;&#125;","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://yoursite.com/categories/datastructure/"},{"name":"tree","slug":"datastructure/tree","permalink":"http://yoursite.com/categories/datastructure/tree/"},{"name":"BST","slug":"datastructure/tree/BST","permalink":"http://yoursite.com/categories/datastructure/tree/BST/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://yoursite.com/tags/datastructure/"},{"name":"tree","slug":"tree","permalink":"http://yoursite.com/tags/tree/"},{"name":"BST","slug":"BST","permalink":"http://yoursite.com/tags/BST/"},{"name":"search","slug":"search","permalink":"http://yoursite.com/tags/search/"},{"name":"iterative","slug":"iterative","permalink":"http://yoursite.com/tags/iterative/"},{"name":"fundamental","slug":"fundamental","permalink":"http://yoursite.com/tags/fundamental/"}]},{"title":"Binary Tree Inorder Traversal Iterative","slug":"inorder-traversal-iterative","date":"2019-04-22T13:23:16.000Z","updated":"2019-04-22T15:20:31.029Z","comments":true,"path":"2019/04/22/inorder-traversal-iterative/","link":"","permalink":"http://yoursite.com/2019/04/22/inorder-traversal-iterative/","excerpt":"","text":"Recursive way is trivial but iterative takes some time.Both recursive and iterative have a space complexity of O(log(N)) if the tree is well balanced while the worst case is O(N) when the tree is linear e.g.: 3 / 2 / 1 Both time complexities are O(N) as they go over all the nodes. 123456789101112131415161718192021222324252627282930313233343536373839class TreeNode &#123; public TreeNode(int val) &#123; this.val = val; &#125; int val; TreeNode left; TreeNode right;&#125;public void inorder_iter(TreeNode root) &#123; // 1. if cur node not null then push cur to a stack and make left node cur node // 2. if cur == null, stack pop and visit // 3. cur node = &#123;popped node right&#125; Stack&lt;TreeNode&gt; stk = new Stack&lt;&gt;(); while (true) &#123; // go to the left leaf node while (root != null) &#123; stk.push(root); root = root.left; &#125; if (stk.isEmpty()) &#123; return; &#125; root = stk.pop(); // visit the node System.out.println(root.val); // visit the right sub-tree root = root.right; &#125;&#125;/** 8 / \\ 6 10 / \\ \\ 5 7 12 / 11**/","categories":[{"name":"datastructure","slug":"datastructure","permalink":"http://yoursite.com/categories/datastructure/"},{"name":"tree","slug":"datastructure/tree","permalink":"http://yoursite.com/categories/datastructure/tree/"},{"name":"traversal","slug":"datastructure/tree/traversal","permalink":"http://yoursite.com/categories/datastructure/tree/traversal/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"datastructure","slug":"datastructure","permalink":"http://yoursite.com/tags/datastructure/"},{"name":"tree","slug":"tree","permalink":"http://yoursite.com/tags/tree/"},{"name":"iterative","slug":"iterative","permalink":"http://yoursite.com/tags/iterative/"},{"name":"fundamental","slug":"fundamental","permalink":"http://yoursite.com/tags/fundamental/"},{"name":"binary tree","slug":"binary-tree","permalink":"http://yoursite.com/tags/binary-tree/"},{"name":"traversal","slug":"traversal","permalink":"http://yoursite.com/tags/traversal/"},{"name":"stack","slug":"stack","permalink":"http://yoursite.com/tags/stack/"}]},{"title":"Ruby Copy Files Recursively With an Exclusion Set","slug":"ruby-file-system","date":"2019-04-22T00:15:08.000Z","updated":"2019-04-22T02:45:01.276Z","comments":true,"path":"2019/04/21/ruby-file-system/","link":"","permalink":"http://yoursite.com/2019/04/21/ruby-file-system/","excerpt":"","text":"This is a Ruby file system tutorial.12345678910111213141516require 'find'# copy all files/dirs in $&#123;source_path&#125; to $&#123;target_path&#125;# e.g. copy_without_files('src/dir', 'tgt/dir', Set.new(['a.rb', 'b.txt'])) will# copy all files including directories to tgt/dir from src/dirdef copy_without_files(source_path, target_path, skipping_map) Find.find(source_path) do |source| target = source.sub(/^#&#123;source_path&#125;/, target_path) if File.directory? source FileUtils.mkdir target unless File.exists? target else Find.prune if skipping_map.include?(File.basename(source)) FileUtils.copy source, target end endend","categories":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/categories/ruby/"},{"name":"file system","slug":"ruby/file-system","permalink":"http://yoursite.com/categories/ruby/file-system/"}],"tags":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"},{"name":"new","slug":"new","permalink":"http://yoursite.com/tags/new/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-04-09T12:47:31.718Z","updated":"2019-04-09T12:47:31.718Z","comments":true,"path":"2019/04/09/hello-world/","link":"","permalink":"http://yoursite.com/2019/04/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}